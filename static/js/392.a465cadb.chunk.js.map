{"version":3,"file":"static/js/392.a465cadb.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/contact-form.module.scss?f8e5","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.scss?8942","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/contact-list.module.scss?b308","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/Contacts/contacts.module.scss?4acc","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact-form\":\"contact-form_contact-form__Pd1e7\",\"contact-label\":\"contact-form_contact-label__xjYD0\",\"contact-input\":\"contact-form_contact-input__FsPX4\",\"contact-button\":\"contact-form_contact-button__G8snG\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts } from '../../redux/selectors';\nimport { addContactThunk } from '../../redux/operations';\nimport css from './contact-form.module.scss';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    const form = e.target;\n\n    const messageName = contacts.find(\n      element => element.name === form.name.value\n    );\n    if (messageName) {\n      alert(`${messageName.name} is already in contacts!`);\n      return;\n    }\n\n    const messageNumber = contacts.find(\n      element => element.number === form.number.value\n    );\n    if (messageNumber) {\n      alert(`${messageNumber.number} is already in contacts!`);\n      return;\n    }\n\n    dispatch(\n      addContactThunk({ name: form.name.value, number: form.number.value })\n    );\n    form.reset();\n  };\n\n  const idElement = nanoid();\n\n  return (\n    <form onSubmit={handleSubmitForm} className={css['contact-form']}>\n      <label className={css['contact-label']}>Name</label>\n      <input\n        id={idElement}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        placeholder=\"name...\"\n        autoComplete=\"off\"\n        className={css['contact-input']}\n      />\n\n      <label className={css['contact-label']}>Number</label>\n      <input\n        id={idElement}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        placeholder=\"number...\"\n        autoComplete=\"off\"\n        className={css['contact-input']}\n      />\n\n      <button type=\"submit\" className={css['contact-button']}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter-box\":\"filter_filter-box__AeVTw\",\"filter-label\":\"filter_filter-label__UXj3e\",\"filter-input\":\"filter_filter-input__-1qzi\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { selectFilter } from '../../redux/selectors';\nimport { setFilter } from '../../redux/filterSlice';\nimport css from './filter.module.scss';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterContact = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n\n  const idElement = nanoid();\n\n  return (\n    <div className={css['filter-box']}>\n      <label className={css['filter-label']}>\n        Find contact by name or by number\n      </label>\n      <input\n        id={idElement}\n        onChange={handleFilterContact}\n        value={filter}\n        name=\"filter\"\n        title=\"Find contacts by name or by number\"\n        required\n        placeholder=\"name or number...\"\n        autoComplete=\"off\"\n        className={css['filter-input']}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list-box\":\"contact-list_list-box__OODjX\",\"list-item\":\"contact-list_list-item__9HJH4\",\"box\":\"contact-list_box__oZodM\",\"name\":\"contact-list_name__9yIR0\",\"number\":\"contact-list_number__8lTxW\",\"list-button\":\"contact-list_list-button__B0XQ9\"};","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectFindElementName,\n  selectFindElementNumber,\n} from '../../redux/selectors';\nimport { deleteContactThunk } from '../../redux/operations';\nimport css from './contact-list.module.scss';\n\nconst ContactList = () => {\n  const filterName = useSelector(selectFindElementName);\n  const filterNumber = useSelector(selectFindElementNumber);\n  const dispatch = useDispatch();\n\n  const array = filterName.length > 0 ? filterName : filterNumber;\n\n  const elements = array.map(element => {\n    const { id, name, number } = element;\n\n    const handleDeleteContact = () => {\n      dispatch(deleteContactThunk(id));\n    };\n\n    return (\n      <li key={id} className={css['list-item']}>\n        <div className={css.box}>\n          <p className={css.name}>{name}:</p>\n          <p className={css.number}>{number}</p>\n        </div>\n        <button\n          type=\"button\"\n          onClick={handleDeleteContact}\n          className={css['list-button']}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n\n  return <ol className={css['list-box']}>{elements}</ol>;\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts-box\":\"contacts_contacts-box__NFsZq\",\"contacts-title\":\"contacts_contacts-title__NwzaD\",\"contacts-subtitle\":\"contacts_contacts-subtitle__GBf87\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux/es';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { fetchContactsThunk } from 'redux/operations';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFindElementName,\n  selectFindElementNumber,\n} from 'redux/selectors';\nimport css from './contacts.module.scss';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const filterName = useSelector(selectFindElementName);\n  const filterNumber = useSelector(selectFindElementNumber);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <div className={css['contacts-box']}>\n      <h1 className={css['contacts-title']}>Add contact</h1>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && <></>}\n      <h2 className={css['contacts-subtitle']}>\n        Total contacts:{' '}\n        {filterName.length || filterNumber.length >= 0\n          ? filterName.length || filterNumber.length\n          : contacts.length}\n      </h2>\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["contacts","useSelector","selectContacts","dispatch","useDispatch","idElement","nanoid","onSubmit","e","preventDefault","form","target","messageName","find","element","name","value","alert","messageNumber","number","addContactThunk","reset","className","css","id","type","pattern","title","required","placeholder","autoComplete","filter","selectFilter","onChange","setFilter","filterName","selectFindElementName","filterNumber","selectFindElementNumber","elements","length","map","onClick","deleteContactThunk","isLoading","selectIsLoading","error","selectError","useEffect","fetchContactsThunk"],"sourceRoot":""}